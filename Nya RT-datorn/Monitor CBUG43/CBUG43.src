	NAM	CBUG4.3
*
* EPROM MONITOR OCH TERMINALPROGRAM
*
* COPYRIGHT CÅ-ELEKTRONIK AB
*           BOX 2010
*           135 02 TYRESÖ  SWEDEN
*
*
* AV ÅKE HOLM 1983-01-04  :45
* REV 3 831108
*
*
* COMMANDS IN CBUG4.3
*
* É VARMSTART I FLEX 9.0
* B DISPLAY BREAKPOINTS
* C CONTINUE
* D DUMPA I HEX OCH ASCII 16 BYTES/RAD
* E EXTENDED INSTRUKTIONSSÖKNING
* F GÅ TILL MINIDISK-BOOT FÖR FLEX 9.0
* G GÅ TILL PROGRAMADRESS OCH EXEKVERA
* H BERÄKNA CHECKSUMMA AAAA-BBBB
* I ÄNDRA REGISTREN PÅ ANVÄNDARSTACKEN
* J GÅ TILL SUBRUTIN OCH SKRIV UT REGISTREN
* K KOPIERA MINNESINNEHÅLL
* L LADDA FLEX 9.6 FRÅN EPROM
* M MINNESMANIPULERING
* O FYLL ETT VISST MINNESBLOCK MED EN BYTE
* PL LADDA FRÅN PROMKORT
* PH BERÄKNA CHECKSUMMA PÅ PROMKORT
* PR LOOP PÅ PROMKORT
* Q MÄT RAM-STORLEKEN
* R PRINTA REGISTREN
* S SÖK 2 BYTES ADRESS
* U TA BORT BREAKPOINTS
* V SÄTT IN BREAKPOINTS MAX 5 ST
* W MINNESTEST
* Y VERIFIERING
* Z DUMPA I HEX OCH ASCII 16 BYTES/RAD PÅ PRINTERN
*
*
****************************************
*
* PORTAR OCH PERIFERIKRETSAR
*
****************************************
*
* KORT CÅ-813B
*
PCIDR	EQU	$E000	SERIEKRETS 2651
PCISR	EQU	$E001
PCIMR	EQU	$E002
PCICR	EQU	$E003
*
KLOCKA	EQU	$E008
*	PA0-3 UT ADRESSVAL
*	PA7   UT 1=READ
* $E009  CA2   HOLD
* $E00A  PB0-3 IN (UT) DATA
* $E00B  CB1 IN INTERRUPT 1/60 HZ
*        CB2 UT WRITE
*
PRIPIA	EQU	$E00C	PIA FÖR PRINTER
*
* KORT CÅ-817
*
FLOPPY	EQU	$E010
COMREG	EQU	$E018
*
* KORT CÅ-816
*
EPROM0	EQU	$E0B0
*
* KORT CÅ-815 TERMINAL
*
CRTREG	EQU	$E0F8
CRTC	EQU	$E0F9
PIAKBD	EQU	$E0FC
PIAKBC	EQU	PIAKBD+1
PIAKD	EQU	PIAKBD+2
PIAKC	EQU	PIAKBD+3
*
*
SKIP1	EQU	$85	SKIPPAR 1 INSTRUKTION
SKIP2	EQU	$8C	SKIPPAR 2 BYTE INSTR
E100	EQU	$E100
F000	EQU	$F000
*
****************************************
*
* RAM FÖR VARIABLER OCH STACK
*
****************************************
*
STACK	EQU	$E100+$2FF
*
	ORG	E100
*
* PSEUDOSTACK
*
STRAD	RMB	1
SIRQR	RMB	2	IRQ VEKTOR
SWI1R	RMB	2
SWI2R	RMB	2
SWI3R	RMB	2
USECC	RMB	1
USEA	RMB	1
USEB	RMB	1
USEDP	RMB	1
USEX	RMB	2
USEY	RMB	2
USEU	RMB	2
USEPC	RMB	2
USESP	RMB	2	USER STACKPOINTER VALUE
SLASK	RMB	2
*
VFLAG	RMB	1	NUMBER OF BREAKPOINTS
BPTAB	RMB	15	TABELL FÖR BREAKPOINTS
BYTECT	RMB	1	LOAD & PUNCH
MCONT	RMB	1
TEMP	RMB	2	TEMP MEMORY
BEGA	RMB	2	STARTADRESS VID DIMP MM
ENDA	RMB	2	STOPPADRESS VID DUMP MM
TILL	RMB	2	HJÄLPCELL VID KOP VER OCH MEM CHG
CKTMP	RMB	2
PEKARE	RMB	2	AKTUELL LEDIG BILDPOSITION
PIXBEG	RMB	2	START AV VIDEOMINNE
CURPOS	RMB	2	ADRESS FÖR CURSORN
ROLADR	RMB	2	STARTADRESS VID SCROLL
CURTMP	RMB	2
PEKTMP	RMB	2
PIXEND	RMB	2	SISTA POS AV VIDEOMINNET
CURRAM	RMB	2
TTEMMP	RMB	2	XTEMP
POSPEK	RMB	2	NY PEKARE VID CURSORPOS
ALFLOK	RMB	1	ALFA LOCK FLAGGA
*
TERAMA	EQU	*
HPOS	RMB	1	HORISONTALPOSITION 0-39
PRIFLG	RMB	1	OUT TO PRINTER
EXCFLG	RMB	1	FLAGGA FÖR SPECIALBOKSTÄVER
CURFLG	RMB	1	FLAGGA FÖR CURSOR
ROLFLG	RMB	1	O= SCROLL EJ BÖRJAT
CURPFL	RMB	1
ESCFLG	RMB	1
CUSFLG	RMB	1
PAGFLG	RMB	1
HPOSTM	RMB	1
TERAMZ	EQU	*
*
PIX	EQU	$E800
PIXSLU	EQU	$EFFF
RADER	EQU	24
*
	ORG	F000
*
INKEY	JMP	INKEY0
INCHK	JMP	INCHK0
OUTCRT	JMP	OUTCR0
INCHA	JMP	INCHA0	ONLY VERSALER
MONITOR	JMP	CONTRL
	JMP	PDATA
	JMP	OUT2HS
	JMP	OUT4HS
	JMP	PCRLF
	JMP	PRIOUT
*
****************************************
* LIB 1.C815TERM
*
* --------------
* REV 16 831108 ÅH
*
****************************************
LLENGD	EQU	80
*
OUTCR0	TSTA		IGNORE NULLS
	BNE	OUTCR1
	RTS
*
OUTCR1	PSHS	A,B,X,U,Y	SAVE INHOPPSADRESS
	LDB	HPOS
	LDU	CURPOS
	TST	CURPFL	CURSORPOS ?
	BEQ	OUT10
	LBSR	POS500	COLUMN ADRESS
	BRA	OUT090
*
*
OUT10	TST	ESCFLG	VAR FÖREG ESCAPE
	BEQ	OUT18
	CLR	ESCFLG
	CMPA	#$40	OM STÖRRE = RADADERSS
	BLO	OUT15
	LBSR	POS100
	BRA	OUT090
*
OUT15	LDX	#INTABE	ESCAPETABELL
	BRA	OUT22
*
OUT18	TST	PAGFLG
OUT20	LDX	#INTAB
OUT22	CMPA	0,X
	BEQ	OUT30
	LEAX	3,X
	CMPX	#INTBND
	BNE	OUT22
	CMPA	#$20	SYNLIGT TECKEN ?
	BLO	OUT095
	BSR	OUT70
OUT090	LBSR	DISCUR	DISPLAY CURSOR
OUT095	PULS	A,B,X,U,Y,PC
*
OUT30	JSR	[1,X]	SUB FÖR SPECIALARE
	BRA	OUT090
*
*
OUT70	TST	EXCFLG
	BNE	OUT160
OUT71	LDX	#EXCHTB	EXCHANGE TABELL FÖR ÅÄÖ MM
OUT110	CMPA	0,X	MATCH ?
	BEQ	OUT150
	LEAX	2,X	NÄSTA
	CMPX	#EXTBND	SLUT PÅ TABELL ?
	BNE	OUT110
	FCB	SKIP2
*
OUT150	LDA	1,X	HÄMTA NY KOD
OUT160	LEAU	1,U	NÄSTA POSITION
	STU	CURPOS
	LDX	PEKARE
OUT165	STA	0,X+	LAGRA PÅ SKÄRMEN
OUT167	CMPX	#PIXSLU+1
	BNE	OUT170
	LDX	#PIX
OUT170	STX	PEKARE
	INCB		NÄSTA HORISONTALPOS
	CMPB	#LLENGD	SLUT PÅ RADEN
	BNE	OUT200
	CLR	HPOS
	TST	PAGFLG
	BEQ	OUT180
	CMPX	PIXEND
	BNE	OUT180
	LDU	CURPOS
	LEAU	-LLENGD,U
	STU	CURPOS
	BRA	OUT280
*
OUT180	TST	ROLFLG
	BEQ	OUT250
	BRA	OUT300
*
OUT200	STB	HPOS
OUT250	CMPX	PIXEND	SLUT PÅ BILDEN ?
	BNE	OUT900
*
* UTANFÖR BILDEN SCROLLA !
*
OUT280	STA	ROLFLG
OUT300	LBSR	SCROLL
	LDY	#LLENGD	RADERA EN RAD
	LBSR	ERAS20
	TST	PAGFLG
	BNE	OUT309
	STX	PIXEND	NYTT VÄRDE
OUT309	RTS
*
LFEED	TST	PAGFLG	SIDMODE ?
	BEQ	LFED01	NIX
	LEAU	LLENGD,U
	CMPU	PIXEND
	BLO	LFED08
	LEAU	-LLENGD,U
	BRA	LFED08
*
LFED01	TST	ROLFLG
	BEQ	LFED02
LFED02	LEAU	LLENGD,U	INCREMENT CURSOR
LFED08	STU	CURPOS
	LDX	PEKARE
	LDB	#LLENGD
LFED12	LEAX	1,X	INCR PEKARE
	CMPX	#PIXSLU+1
	BNE	LFED14
	LDX	#PIX
LFED14	CMPX	PIXEND
	BNE	LFED16
	TST	PAGFLG	PAGEMOD ?
	BEQ	LFED15
	PSHS	X
	LBSR	SCRL50
	PULS	X
	LEAX	-LLENGD,X
	BRA	LFED16
*
LFED15	PSHS	B,X
	BSR	OUT900	SCROLLA
	BSR	OUT280
	PULS	B,X
LFED16	DECB
	BNE	LFED12
OUT900	STX	PEKARE	SPARA POSITIONEN
OUT990	RTS
*
CARR	LDX	PEKARE
	TSTB		KOLLA OM REDAN I VÄNSTERKANTEN
	BEQ	CAR100
	PSHS	B	SPARA HPOS
CARR20	LEAU	-1,U	DECREMENT CURPOS
	DECB		B GÅNGER
	BNE	CARR20
	STU	CURPOS
	PULS	B	ÅTERTAG HPOS
CARR30	LEAX	-1,X	BACKA TILL VÄNSTERKANTEN
	CMPX	#PIX-1
	BNE	CARR50
	LDX	#PIXSLU
CARR50	DECB
	BNE	CARR30
CAR100	STB	HPOS
CAR900	BRA	OUT900
*
*
BACKSP	LDX	PEKARE
	LDA	#$20	SPACEKOD
BACK10	STA	0,-X
BACK12	LEAU	-1,U	DECREMENT CURSOR
	STU	CURPOS
	DECB
	BMI	BACK70
	LBRA	OUT200
*
BACK70	LDB	#LLENGD-1	NOLLA HPOS
	STB	HPOS
	CLR	ROLFLG
	STX	PEKARE
	LDX	PIXBEG
	LEAX	-1,X
	CMPX	PEKARE
	BNE	BELRTS	EJ FÖR LÅNGT BAKÅT
	LDX	PIXEND
	STX	CURPOS
	BRA	CAR900
*
*
BELL00	LDA	#$34
	STA	PIAKBC
	LDA	#$3C
	STA	PIAKBC
BELRTS	RTS
*
DISCUR	LDU	#CURPOS
	LDA	#14	REGISTER NR
DISCU5	LDB	0,U+	GET CURSOR POSITION
*
* LAGRA I CRTC
*
STOCRT	BSR	STDCRT
	INCA
	LDB	0,U		GET ADRESS FROM RAM
STDCRT	STD	CRTREG
	RTS
*
SCROLL	TST	PAGFLG
	BNE	SCRL50	INDEXFIX OM PAGE-MOD
	LDU	#PIXBEG
	LDX	0,U
	LEAX	LLENGD,X
	STX	0,U	STORE NEW STARTADSRESS
STOPIX	LDA	#12
	BRA	DISCU5
*
SCRL50	LDX	ROLADR	HÄMTA STARY AV PIX
SCRL60	LDA	LLENGD,X
	STA	0,X+
	CMPX	PIXEND
	BNE	SCRL60
	LEAX	-LLENGD,X
	LDY	#LLENGD
	BRA	ERAS10
*
*
ERASE	LDY	#$800	ANTAL TECKEN PÅ SKÄRMEN
	LDX	#PIX	BÖRJN AV MINNET
ERAS10	STX	PEKARE
ERAS20	LDX	PEKARE	HÄMTA ADRESS
ERAS50	LDA	#$20	SPACEKOD
ERA100	STA	0,X+	LÄGG UT
	CMPX	#PIXSLU+1	UTANFÖR MINNET ?
	BNE	ERA200
	LDX	#PIX	BÖRJA FRÅN BÖRJAN
ERA200	LEAY	-1,Y	DECREMENTA ANTALET
	BNE	ERA100
	RTS
*
EROLIN	LDX	PEKARE
	LDA	#$20	SPACE
EROLI5	STA	0,X+
	INCB		SLUT PÅ RAD
	CMPB	#LLENGD
	BNE	EROLI5
	RTS
*
PAGE	STA	PAGFLG
*
RESPIX	LDX	#PIX	ÅTERSTÄLL BILDEN
	LDB	#6
	LDU	#PEKARE
RPIX10	STX	0,U++
	DECB
	BNE	RPIX10
	LDA	#RADER	FIXA PIXEND
RPIX20	LEAX	LLENGD,X
	DECA
	BNE	RPIX20
	STX	PIXEND	INNEHÅLLER NU PIXEND+1920
	LDU	#PIXBEG
	BSR	STOPIX
	LDY	#2048
	BSR	ERAS20
	LDX	#TERAMA
RPIX70	CLR	0,X+
	CMPX	#TERAMZ
	BNE	RPIX70
	RTS
*
CURLFT	EQU	*
	LDX	PEKARE
	LEAX	-1,X
	JMP	BACK12
*
CURRIG	EQU	*
	LDX	PEKARE
	LEAX	1,X
	LEAU	1,U
	STU	CURPOS
	JMP	OUT167
*
CURNER	EQU	*
	LDX	PEKARE
	LEAU	LLENGD,U
	CMPU	PIXEND
	BLO	CURN10
	LEAU	-LLENGD,U
CURN10	LEAX	LLENGD,X
	CMPX	PIXEND
	BLO	CURN20
	LEAX	-LLENGD,X
CURN20	STU	CURPOS
	STX	PEKARE
	RTS
*
CURUPP	EQU	*
	LDX	PEKARE
	LEAX	-LLENGD,X
	CMPX	PIXBEG
	BHI	CURU10
	LEAX	LLENGD,X
CURU10	LEAU	-LLENGD,U
	CMPU	PIXBEG
	BHI	CURU20
	LEAU	LLENGD,U
CURU20	RTS
*
CURHOM	EQU	*
	LDX	PIXBEG
	STX	PEKARE
	STX	CURPOS
	RTS
*
*
SETESC	STA	ESCFLG
	RTS
*
BYTJO	CLR	EXCFLG
	RTS
*
BYTNEJ	STA	EXCFLG
	RTS
*
CUROFF	LDD	#$0A20
CUR099	STD	CRTREG
	RTS
*
CURON1	LDD	#$0A00	TÄND
	BRA	CUR089
*
CURON2	LDD	#$0A40	FAST BLINK
	BRA	CUR089
*
CURON3	LDD	#$0A60	SLOW BLINK
CUR089	STD	CURRAM
	BRA	CUR099
*
SAVEBL	BSR	CUROFF
*
SAVEPO	LDX	PEKARE
	STX	PEKTMP
	STB	HPOSTM
	STU	CURTMP
	RTS
*
RESTON	LDD	CURRAM
	BSR	CUR099
*
RESTOR	LDX	CURTMP
	STX	CURPOS
	LDX	PEKTMP
	STX	PEKARE
	LDB	HPOSTM
	STB	HPOS
	RTS
*
* CURSOR POSITIONERING
*
POS100	STA	CURPFL
	STA	PAGE
	SUBA	#$40
	CMPA	#RADER-1
	BHI	POS197
	LDX	#PIX
POS120	TSTA		RAD NOLL ?
	BEQ	POS190
POS130	LEAX	LLENGD,X	NÄSTA RAD
	DECA
	BNE	POS130
POS190	STX	POSPEK
POS197	RTS
*
POS500	CLR	CURPFL
	SUBA	#$30
	CMPA	#LLENGD
	BHS	POS900
	STA	HPOS
	LDX	POSPEK
	LEAX	A,X
	STX	PEKARE
POS800	STX	CURPOS
POS900	RTS
*
ROLMOD	CLR	PAGFLG
	RTS
*
*
STRECK	LDX	#PIX
	LDA	STRAD
	PSHS	A
	ANDA	#7
	TSTA
	BEQ	STRE40
STRE20	LEAX	LLENGD,X
	DECA
	BNE	STRE20
	LDB	#LLENGD
	LDA	#'-
STRE30	STA	0,X+
	DECB
	BNE	STRE30
STRE40	STX	PEKARE
	STX	ROLADR
	STX	CURPOS
	CLR	HPOS
	STA	PAGFLG
	PULS	A
	LSRA
	LSRA
	LSRA
	LSRA
	TSTA
	BEQ	STRRTS
	LDX	PIXEND
STRE50	LEAX	-LLENGD,X
	DECA
	BNE	STRE50
	STX	PIXEND
STRRTS	RTS
*
*
****************************************
*
* TANGENTBORDETS INTECKENRUTINER
*
****************************************
*
INCHK0	PSHS	A
	LDA	PIAKBC
	ANDA	#$80
	PULS	A,PC
*
INKEY0	PSHS	X
INKEY1	BSR	INCHK0
	BEQ	INKEY1
	LDA	PIAKBD
	ANDA	#$7F
INKEY9	PULS	X,PC
*
*
* TABELL FÖR INITIERING AV 6845
*
CRTA80	FCB	113	RO H TOTAL
	FCB	80	R1 H DISPLAYED
	FCB	$54	R2 H SYNC POS
	FCB	8	R3 H SYNC WIDTH
	FCB	24	R4 V TOTAL
	FCB	12	R5 V SCAN ADJ
	FCB	24	R6V DISPLAYED
	FCB	24	R7 V SYNC POS
	FCB	0	R0 INTERLACED MODE
	FCB	11	R9 MAX SCAN LINE ADDRES
	FCB	$00	R10 CURSOR START
	FCB	08	R11 CURSOR END
	FDB	$E800	R12-13 PIX
	FDB	$E800	R14-15 CURSOR POS
*
* TABELL FÖR KORRIGERING AV MCM66790 KODES
*
EXCHTB	FDB	$5B0B
	FDB	$5C0C
	FDB	$5D0D
	FDB	$5E0E
	FDB	$7B1B
	FDB	$7C1C
	FDB	$7D1D
	FDB	$7E1E
	FDB	$2303
	FDB	$4007
	FDB	$6017
EXTBND	EQU	*
*
*
* ENDAST ESCAPE
*
INTABE	EQU	*
	FCB	01
	FDB	PAGE	HOME CLEAR
	FCB	02
	FDB	CURON1	CURSOR ON
	FCB	03
	FDB	CURON2	CURSOR BLINK ON
	FCB	04
	FDB	CURON3	SLOW CURSOR BLINK ON
	FCB	05
	FDB	RESPIX
	FCB	$10
	FDB	ROLMOD
	FCB	$11
	FDB	STRECK
	FCB	$15
	FDB	CUROFF
	FCB	$16	RESTORE
	FDB	RESTOR
	FCB	$17	RESTORE OCH TÄND
	FDB	RESTON
	FCB	$18
	FDB	SAVEBL
	FCB	$19
	FDB	SAVEPO
	FCB	$1A
	FDB	EROLIN	ERASE END OF LINE
INTAB	EQU	*
	FCB	$07
	FDB	BELL00
	FCB	$08
	FDB	BACKSP
	FCB	$0A
	FDB	LFEED
	FCB	$0D
	FDB	CARR
	FCB	$1B
	FDB	SETESC
INTBND	EQU	*
*
	FCB	CURUPP
	FCB	$FF
	FCB	CURNER
	FCB	$FF
	FCB	CURLFT
	FCB	$FF
	FCB	CURRIG
	FCB	$FF
	FCB	CURHOM
	FCB	$FF
*
TEXT01	FCB	$D,$A
	FCC	'CBUG4.3'
TEXT02	FCB	$D,$A,'$,4
*
TEXT05	FCB	$D,$A,4
*
TEXT07	FCC	'Start Slut Till'
	FCB	$D,$A,'>,4
*
TEXT08	FCC	'Ej {ndrat:'
	FCB	4
*
TEXT09	FCC	'Start Slut'
	FCB	$D,$A,'>,4
*
TEXT10	FCC	'Byte:'
	FCB	4
*
TEXT11	FCC	'Cksm:'
	FCB	4
*
TEXT15	FCC	'Adress:'
	FCB	4
*
TEXT16	FCC	'Ram slut=$'
	FCB	4
*
TEXT17	FCC	' - '
	FCB	4
*
TEXT18	FCC	' => '
	FCB	4
*
TEXT19	FCC	' Pass '
	FCB	4
*
TEXT20	FCC	' Bits in error:'
	FCB	4
*
TEXT21	FCC	'76543210'
*
TEXT22	FCC	'SWI :,4
*
*
* KALLSTART
*
KALST	EQU	*
	LDS	#STACK
	LEAX	-20,S
	STX	USESP
	LDX	#RETINT
	STX	SIRQR
	STX	SWI2R
	STX	SWI3R
	LDX	#CONTRL
	STX	USEPC
	JSR	NOBRKP
	CLR	FLOPPY+4	NOLLA DRIVEREG
*
* SÄTT UPP PCI 2651
*
	LDX	#PCIDR
	LDA	3,X	nolla MR2
	LDA	#$4E	8+1 stoppbit
	STA	2,X
	LDA	BAUDR	9600 baud standard
	STA	2,X
	LDA	#5
	STA	3,X
*
* SÄTT UPP KLOCKPIA
*
	CLR	KLOCKA+1
	CLR	KLOCKA+3
	LDD	#$FF34	UT CA2 LÅG
	STD	KLOCKA
	LDD	#$0034	UT CB2 LÅG
	STD	KLOCKA+2
	LDA	#$FF	ENABLA PERIODISKT IRQ
	STA	KLOCKA
*
* SÄTT UPP PRINTERPIA
*
	CLR	PRIPIA+1
	CLR	PRIPIA+3
PINIT	LDD	#$004
	STD	PRIPIA
	LDD	#$FF3C
	STD	PRIPIA+2
*
* INITOERA KBD PIA
*
	LDD	#$003C
	STD	PIAKBD
	LDD	#$FF04
	STD	PIAKBD+2
*
* INITIERA CRTC
*
	LDX	#CRTA80
SETC41	CLRA
SETC42	LDB	0,X+
	STD	CRTREG
	INCA
	CMPA	#$10
	BNE	SETC42
	JSR	RESPIX
	JMP	START
*
*
****************************************
*
* MONITORPROGRAM
*
****************************************
	ORG	F000+$800
*
* VECTORED ADDRESSES FOR INDIRECT JUMPS
* COMPATIBLE WITH SWTPC S-BUG
*
	FDB	START
	FDB	CONTRL
	FDB	INCH
	FDB	INCHE
	FDB	INCHEK
	FDB	OUTCH
	FDB	PDATA
	FDB	PCRLF
	FDB	PSTRNG
	FDB	WARMST
MON	EQU	*
START	EQU	*
	LDS	#STACK-12
	STS	USESP
*
* PRINT HEADER
*
WARMST	LDS	#STACK-12	RESTORE STACKPOINTER
	LDX	#TEXT01	INITIERINGS STRÄNG
	LDA	#$D8
	STA	COMREG
	STA	$E010	SHUT OFF MOTOR
	BRA	CONT20
*
* KONTROLLSLINGANS INHOPP
*
CONTRL	EQU	*
	LDS	#STACK-12
	LDX	#TEXT02
CONT20	JSR	PDATA
	CLR	PRIFLG
	CLR	STRAD
*
* TAG IN KOMMANDO I A-ACC
* SÖK SEDAN INGÅNG TILL
* BEGÄRD RUTIN I KOMTAB
*
	BSR	INCHE
	TFR	A,B
	JSR	OUTS	BLANK
	CMPB	#$60	SMÅ BOKSTÄVER BLIR STORA
	BLO	CONT50
	SUBB	#$20
*
CONT50	SUBB	#$3F	CHECK IF VALID CHARACTER
	BLS	CONTRL	FEL DÅ B<É
	CMPB	#$1F
	BHI	CONTRL	FEL DÅ B VAR >Ü
	ASLB		MULT MED 2
*
* INMATAT TECKEN OMGJORD TILL ADRESS
* I KOMMANDOTABELLEN
*
	LDX	#KOMTAB-2
	JSR	[B,X]	GO AND WORK
	BRA	CONTRL	RETURN TO MAIL LOOP
*
* Mata ut ett tecken till PCI 2651
*
PCIOUT	EQU	*
	LDB	PCISR
	BITB	#$40
	BEQ	PCIOU9	no DCD
	BITB	#1
	BEQ	PCIOUT
	STA	PCIDR
PCIOU9	RTS
*
* Ta in ett tecken från PCI2651
*
PCIIN	EQU	*
	PSHS	B
PCIIN1	LDB	PCISR
	BITB	#2
	BEQ	PCIIN1
	LDA	PCIDR	tecken
	PULS	B,PC
*
*
* RUTINER FÖR ATT GÄMTA IN TECKEN I A-ACK
*
INCHE	BSR	INCH	GET INPUT CHARACTER
	ANDA	#$7F	IGNORE PARITY
OUTCHI	JMP	OUTCH
*
INCH	TST	SERIE
	BNE	PCIIN
	JMP	INKEY
*
INCHA0	BSR	INCH	GET TECKEN
	ANDA	#$7F	NO PARITY
	CMPA	#$60
	BLO	INCHA9
	SUBA	#$20
INCHA9	BRA	OUTCHI
*
*
* TEST IF INPUT CHARACTER
* Z=1 NO Z=0 YES
*
INCHEK	PSHS	A
	LDA	PIAKBC	CHECKA FLAGGAN
	ANDA	#$80
INCK90	PULS	A,PC
*
* TAG IN HEXADECIMALT TECKEN.
* OMVANDLA ASCII 0-9,A-F TILL BINÄRT
* 0-F
*
INHEX	BSR	INCHE
INHEX2	CLV
	SUBA	#$30
	BMI	INHEX9	HOPPA OM EJ HEX
	CMPA	#$09
	BLE	IN1HG	DECIMALT ?
	ANDA	#$DF
	CMPA	#$11
	BMI	INHEX9	HOPPA OM EJ HEX
	CMPA	#$16
	BGT	INHEX9	HOPPA OM EJ HEX
	SUBA	#$7
IN1HG	RTS
*
INHEX9	SEV		SET FLAG TO INDICATE NON HEX
	RTS
*
* TAG IN TVÅ TECKEN. GÖR EN DATA BYTE
*
BYTE	BSR	INHEX	HEXADECIMALT TECKEN
	BVS	INHEX9
BYTE2	ASLA
	ASLA
	ASLA
	ASLA		HHHH 0000
	TFR	A,B
	BSR	INHEX
	BVS	INHEX9
	PSHS	B
	ADDA	0,S+
	TFR	A,B
	RTS
*
* BYGG ADRESS I D & X
*
BADDR	BSR	BYTE	HÖGTSA 8 BITARNA
	BVS	INHEX9
	PSHS	A	MSB
	BSR	BYTE
	PULS	A	OCH MSB FINNS I A-ACK
	BVS	INHEX9
	TFR	D,X
	RTS
*
BADDRS	BSR	BADDR
	BVS	BEGRTS
	BRA	OUTS	SP+RTS
*
BEGEND	BSR	BADDRS
	BVS	BEGRTS
	STX	BEGA
	TFR	X,Y
ENDADR	BSR	BADDRS
	BVS	BEGRTS
BEGSTX	STX	ENDA
BEGRTS	RTS
*
BEGENS	LDX	#TEXT09	"START SLUT"
	BSR	PSTRNG
	BSR	BEGEND	FIXA START & STOPP
	BVS	INHEX9	OM EJ HEX GÅ RTS
	LDD	ENDA
	SUBD	BEGA
	BCS	BEGENS	ENDA MÅSTE VARA > BEGA
OUTRTS	RTS
*
BEGENT	BSR	BEGENS
	BVS	NONHEX
	LEAX	1,X
	BRA	BEGSTX
*
NONHEX	LEAS	2,S
	RTS
*
*
OUT2H	LDA	0,X+	PRINTA 2 HEX TECKEN
OUT2HT	PSHS	A
OUT2HU	BSR	OUTHL	OMVANDLA TILL ASCII
	PULS	A
	BRA	OUTHR	PRINTA HÖGRE BYTE HALVAN
*
OUT4HS	BSR	OUT2H	PRINTA 4 HEX TECKEN + BLANK
OUT2HS	BSR	OUT2H	PRINTA 2 HEX TECKEN + BLANK
OUTS	LDA	#$20	MELLANSLAG
	BRA	OUTCH	(RETURN I OUTCH)
*
OUTHL	LSRA
	LSRA
	LSRA
	LSRA
*
OUTHR	ANDA	#$0F	MASKA BORT HÖGRA DELEN
OUTHZ	ADDA	#$030	TILLVERKA ASCII
	CMPA	#$39	STÖRRE ÖN 9
	BLS	OUTCH
	ADDA	#$7	FÖR A-F
*
* MATA UT ETT TECKEN FRÅN A-ACC
*
OUTCH	TST	PRIFLG
	BNE	PRIOUT
	TST	SERIE
	LBNE	PCIOUT
	JMP	OUTCR0
*
PRIOUT	PSHS	A
	PSHS	A
PRI02	LDA	PRIPIA
	BMI	PRI02
	PULS	A
	STA	PRIPIA+2
	LDA	#$34
	STA	PRIPIA+3
	LDA	#$3C
	STA	PRIPIA+3
PRI05	DECA
	BNE	PRI05
	LDA	PRIPIA+2
	PULS	A,PC
*
*
PCRLF	PSHS	X,A	SAVE POINTER & A-ACC
	LDX	#TEXT05	"CR + LF + 0"
	BSR	PDATA
	PULS	X,A,PC	GET IT BACK
*
* SKRIV UT TEXT STRÄNG.
* X-REG PEKAR PÅ TECKEN.
* AVSLUT MED 'EOT' (04).
*
PSTRNG	BSR	PCRLF	SEND CR+LF FIRST
*
PDATA	LDA	0,X+	HÄMTA TECKEN
	CMPA	#$04	'EOT'
	BEQ	OUTRTS
	BSR	OUTCH
	BRA	PDATA
*
UTMIN	BSR	UTMIN3
UTMIN2	LDA	#'=
UTMIN3	BRA	OUTCH
*
*
* SKRIV UT STACKENS INNEHÅLL
*
PRREG	EQU	*
	BSR	PCRLF
PRREG2	LDX	#USECC
	LDA	#'C
	BSR	UTMIN
	BSR	OUT2HS	CC
*
	LDA	#'A
	BSR	UTMIN
	BSR	OUT2HS	ACC-A
*
	LDA	#'B
	BSR	UTMIN
	BSR	OUT2HS	ACC-B
*
	LDA	#'D
	BSR	UTMIN
	JSR	OUT2HS	DP-REG
*
	LDA	#'X
	BSR	UTMIN
	BSR	OUT400	X-REG
*
	LDA	#'Y
	BSR	UTMIN
	BSR	OUT400	Y-REG
*
	LDA	#'U
	BSR	UTMIN
	BSR	OUT400	U-REG
*
	LDA	#'P
	BSR	UTMIN
	BSR	OUT400	PC-REG
*
	LDA	#'S
	BSR	UTMIN
OUT400	JMP	OUT4HS
*
*
* HÄR PÅ 'M' KOMMANDO.
*
* MEMORY CHANGE WITH SHORT AND LONG OFFSET CALCULATION
*
CHANGE	JSR	BADDRS	BYGG ADRESS , PRINTA BLANK
	BVS	CHARTS
	TFR	X,Y
CHANG	STX	BEGA
	JSR	OUT2HS	PRINTA GAMLA INNEHÅLLET
	JSR	INCHE
	CMPA	#'.	LINE FEED ERSÄTTNING
	LBEQ	LF
	CMPA	#'-	GO TO PREVIOUS LOCATION
	LBEQ	CHOCON
	CMPA	#$0D	CR GO RTS
	BNE	CHA200
CHARTS	RTS
*
CHA200	CMPA	#'R	KORT RELATIV OFFSET
	BNE	CHA300
	LEAX	1,Y	PEKA PÅ "00" OFFSET
	LDB	0,Y	HÄMTA OFFSETVÄRDE
	BPL	CHA210	FRAMÅT
CHA205	LEAX	-1,X	BACKA
	INCB		TILL RÄTT STÄLLE
	BNE	CHA205
CHA210	TSTB
	BEQ	CHA250	KLART
	LEAX	B,X
CHA250	BRA	CHA380
*
CHA300	CMPA	#'L	LÅNG RELATIV BRANCH
	BNE	CHA400
	LEAX	2,Y	HÄMTA "0000" OFFSET
	LDU	0,Y	OFFSETVÄRDE
	LDA	0,Y	KOLLA RIKTNINGEN
	BPL	CHA320	FRAMÅT
CHA310	LEAX	-1,X	BAKÅT
	LEAU	1,U
	CMPU	#0	KLART ?
	BNE	CHA310
	BRA	CHA380
*
CHA315	LEAX	1,X
	LEAU	-1,U
CHA320	CMPU	#0
	BNE	CHA315
CHA380	STX	TILL
	LDA	#'=
	JSR	OUTCH
	LDA	#'$
	JSR	OUTCH
	BRA	LONGOG
*
CHA400	CMPA	#'W	SKRIV IN OFFSET
	BNE	CHA500
	LDX	#TILL	SKRUT UT'ET
	JSR	OUT2HS
	LDA	TILL	HÄR STÅR DET
	BRA	NYDATC
*
CHA500	CMPA	#'O	BERÄKNA OFFSET
	BNE	NYDATA
	STX	TILL
	JSR	ENDADR	TAG IN DESTINATIONS ADRESSEN
	BVS	CHA50
	TFR	X,D	FLYTTA TILL DEST ADRESSEN
	SUBD	TILL	SKILLNADEN
	CMPD	#$007F	KOLLA OM KORT OFFSET
	BLO	KORTOF
	CMPD	#$FF7F
	BHI	KORTOF
*
LONGOF	LEAX	-1,X	ETT EXTRA STEG
	TFR	X,D
	SUBD	TILL
	STD	TILL
LONGOG	LDX	#TILL	PRINTA 4 HEX ??D OFFSET
	JSR	OUT4HS
	BRA	CHA50
*
* KORT OFFSET
*
KORTOF	TFR	B,A	LÅGA HALVAN
	STB	TILL	SE "W" OVAN
	JSR	OUT2HT	PRINTA OFFSET (A-ACC)
	BRA	CHA50
*
NYDATA	CMPA	#$27	'-TECKEN
	BNE	NYDATB
	JSR	INCHE
	BRA	NYDATC
*
NYDATB	JSR	INHEX2
	BVS	CHA50
	JSR	BYTE2
	BVS	CHA50
NYDATC	STA	0,Y+	LAGRA I MINNET
	CMPA	-1,Y	FATSNADE DET?
	BEQ	CHA50
CHOFEL	JSR	BELL00
CHOCON	LEAY	-1,Y	BACKA ETT STEG
	FCB	SKIP2
LF	LEAY	1,Y	STEGA TIL NÄSTA
CHA50	STY	BEGA
	JSR	PCRLF
	LDX	#BEGA
	JSR	OUT401	SKIPPA ADRESSEN
	TFR	Y,X	LÄGG ADRESSEN I X IGEN
	JMP	CHANG	OM IGEN
*
* SWI SERVICE RUTIN (BREAKPOINTS)
*
SWISER	STS	USESP
	TFR	S,U
	LDB	#12	ANTAL POS I STACKEN
	LDX	#USECC	START AV PSEUDOSTACK
PSUD1	LDA	0,U+
	STA	0,X+	OCH LÄGG IN
	DECb
	BNE	PSUD1
	CLRA
	TFR	A,DP
	LDX	USEPC	DECREMET PC
	LEAX	-1,X
	STX	USEPC
	LDX	#TEXT22
	JSR	PSTRNG
	BSR	BRKP40	FINNS BREAK POINTS
	BEQ	BRKP20
*
* TAG BORT BREAK POINTS MÄR
* VI ÄR I CBUG MONITORN
*
BRKP00	LDA	2,X	BRKPT'S PÄ SAMMA ADRESS
	CMPA	#$3F	MULTIDEFINIERADE BRKPT'S
	BEQ	BRKP10
	LDY	0,X
	STA	0,Y
BRKP10	LEAX	3,X
	DECB
	BNE	BRKP00
BRKP20	JSR	PRREG
	JMP	CONTRL
*
BRKP40	LDX	#BPTAB	TABELL ÖVER BREAK POINTS, OPCODER
	LDB	VFLAG	ANTAL INSTALLERADE BRKPT'S
BRKRTS	RTS
*
* HÄR PÅ 'V' KOMMANDO
*
* SÄTT IN EN BRKPT.
*
SETBR	EQU	*
	LDX	#SWISER
	STX	SWI1R
	BSR	BRKP40	LEDIGT ?
	CMPB	#5	FINNS PLATS ?
	BLO	SETBP50
	JMP	BELL00
*
SETBP50	JSR	BADDRS
	BVS	BRKRTS	OM EJ HEX GÅ RTS
	TFR	X,Y
*
	BSR	BRKP40	FINN LEDIG PLATS
	BEQ	BRKP60	OM LEDIG, STOPPA IN BRKPT.
*
BRKP50	LEAX	3,X
	DECB
	BNE	BRKP50
*
BRKP60	INC	VFLAG
	STY	0,X	IN I TABELLEN
	RTS
*
* TA BORT ALLA BREAKPOINTS
*
NOBRKP	EQU	*	TA BORT GAMLA SWI-KODER FÖRST
	LDB	#5
	LDX	#BPTAB	TABELLEN
U070	LDU	0,X	HÄMTA ADRESS TILL MINNET
	LDA	0,U	HÄMTA IN DATAT DÄR
	CMPA	#$3F	ÄR DET SWI KOD
	BNE	U100	NIX NO ACTION
	LDA	2,X	DÅ FINNS RIKTIGA KODEN I TABELLEN
	STA	0,U	LÄGG TILLBAKS DEN
U100	LEAX	3,X	NÄSTA TABELLVÄRDE
	DECB
	BNE	U070
NOBRKQ	LDB	#16
	LDX	#VFLAG
U200	CLR	0,X+
	DECB
	BNE	U200
PDKLAR	RTS
*
* STOPPA IN ALLA BRKPTS I MINNET
* VID 'G' ELLER 'C'
*
BRKPIN	BSR	BRKP40
BRKPRT	BEQ	PDKLAR
*
TGB	LDY	0,X	HÄMTA ADRESSEN
	CMPY	USEPC	ÄR DET SAMMA SOM I PSEUDOSTACKEN
	BEQ	TGB5	SKIP I SÅ FALL
	LDA	0,Y	OPCODE SOM SKALL EXEKVERAS
	STA	2,X
	LDA	#$3F	SWI OPCODE
	STA	0,Y	ERSÄTT MED SWI
TGB5	LEAX	3,X
	DECB
	BRA	BRKPRT
*
* PRINT ALL BREAKPOINTS
*
DISBKP	LDB	VFLAG
	BEQ	DISB00	NOLL OM INGA BRKPT'S
	LDX	#BPTAB	HÄMTA TABELLEN
DISP50	JSR	OUT4HS	PRINTA ADRESSEN
	LEAX	1,X	HOPPA ÖVER OPCODEN
	DECB		NÄSTA
	BNE	DISP50
LOAD35	RTS
*
DISB00	LDA	#$30
	JMP	OUTCH	PRINTA EN NOLLA
*
* GO TO AAA AND EXECUTE PROGRAM
*
GOEXEC	JSR	BADDRS	START ADRESS
	BVS	LOAD35
	STX	USEPC	LÄGG IN I PSEUDOSTACK
*
* CONTINUE FRPOM BREAKPOINT
*
CONTIN	EQU	*
*
* FLYTTA FRÅN PSEUDOSTACK
*
	LDU	USESP
	LDB	#12
	LEAU	12,U	PEKA PÅ HÖGSTA ADRESSEN
	LDX	#USESP	PEKA PÅ USER RANM
PSEU10	LDA	0,-X
	PSHU	A
	DECB
	BNE	PSEU10
	BSR	BRKPIN	STOPPA IN EV BRKPT'S
CONTI7	TFR	U,S
RETINT	RTI
*
CHUREG	EQU	*
	LDA	#':
	JSR	OUTCH
	JSR	INCHA0	HÄMTA TECKEN
	LDX	#USECC
	CMPA	#'C	CC-REG
	BNE	CHU100
	BSR	CHBYTE
	LDA	-1,X	FIXA BIT 7
	ORAA	#$80
	STA	-1,X
	RTS
*
CHU100	CMPA	#'A	A-ACK
	BNE	CHU200
	LEAX	1,X
	BRA	CHBYTE
*
CHU200	CMPA	#'B	B-ACK
	BNE	CHU300
	LEAX	2,X
	BRA	CHBYTE
*
CHU300	CMPA	#'D	DP--RG
	BNE	CHU400
	LEAX	3,X
	BRA	CHBYTE
*
CHU400	CMPA	#'X	X-REG
	BNE	CHU500
	LEAX	4,X
	BRA	CHADDR
*
CHU500	CMPA	#'Y	Y-REG
	BNE	CHU600
	LEAX	6,X
	BRA	CHADDR
*
CHU600	CMPA	#'U	U-REG
	BNE	CHU700
	LEAX	8,X
	BRA	CHADDR
*
CHU700	CMPA	#'P	PROGRAM COUNTER
	BNE	CHU800
	LEAX	10,X
	BRA	CHADDR
*
CHU800	CMPA	#'S	STACK POINTER
	BNE	CHU900
	LEAX	12,X
	BRA	CHADDR
*
CHU900	LDA	#'?
	JSR	OUTCH
CHU990	RTS
*
CHBYTE	EQU	*	DISPLAY AND CHANGE BYTE
	JSR	UTMIN2
	JSR	OUT2HS	GAMLA BYTEN
	JSR	BYTE	NYTT DATA
	BVS	CHU990
	LEAX	-1,X
	STA	0,X+	LAGRA NYA VÄRDET
	RTS
*
CHADDR	EQU	*	DISPLAY AND CHANGE 16 BITS
	JSR	UTMIN2	PRINT =
	JSR	OUT4HS	PRINT 4 HEX
	TFR	X,U	SAVE X
	JSR	BADDRS	GET NYA SIFFROR
	BVS	CHADDS
	STX	-2,U	PETA IN NYA DATAT
CHADDS	RTS
*
SUBR	EQU	*
	JSR	BADDRS
	BVS	CHU990
	STX	USEPC
	LDU	#SWISER
	STU	SWI1R	RIGHT VECTOR
	JSR	BRKPIN	STOPPA IN BRYPUNKTER
	LDA	USECC+3	GET DP VÄRDE
	TFR	A,DP
	LDD	USECC+1	A OCH B ACK
	LDX	USECC+4
	LDY	USECC+6
	LDU	USECC+8	TA MED REGISTREN
	JSR	[USEPC]	INDIREKT SUBHOPP
	SWI	SKRIV REGISTER OCH ÅTERGÅ
*
* C H K S M
*
CHKSM	JSR	BEGENT
	CLRA
	CLRB
*
CKSM10	CMPY	ENDA
	BEQ	CKSM20
	ADDB	0,Y+
	ADCA	#0
	BRA	CKSM10
*
CKSM20	STD	BEGA
	LDX	#TEXT11	'CKSM'
	JSR	PSTRNG
	LDX	#BEGA
OUT401	JMP	OUT4HS
*
* HÄR PÅ 'D' KOMMANDO
*
* DUMP RUTIN-
* UTLAGD SOM SUBRUTIN FOR ATT KUNNA
* ANVÄNDAS I AVLSUNINGSSYFTE I EGNA
* PRGRAM. DÅ MÅSTE BEGA/ENDA LADDAS
* MED START RESP. STOPADRESSER.
* BEGA MODIFIERAS AV RUTINEN
*
*
DUMPRI	JSR	BEGENS	FIXA START OCH STOPP
	BVS	COMP99
	INC	PRIFLG	TILL PRINTERN
	BRA	DUMP17
*
DUMP16	JSR	BEGENS	FIXA START & STOP
	BVS	COMP99
DUMP17	LDA	BEGA+1
	ANDA	#$F0	FULL RAD
	LDB	#16
*
PDUMP	STA	BEGA+1
	STB	BYTECT
*
PD1000	JSR	BREAK	AVBROTT ?
*
	JSR	PCRLF
*
* BÖRJA DUMPA
* FORMAT AAAA BB BB BB BB BB BB BB BB .ASII..
*
	LDX	#BEGA
	BSR	OUT405	PRINTA ADRESSEN
	LDX	BEGA
	LDB	BYTECT	8 BYTES PER/RAD
PD3000	JSR	OUT2HS
	DECB
	BNE	PD3000
*
* PRINTA SAMMA BYTES MEN I
* EKVIVALENT ASCII.
*
	JSR	OUTS	SPACE
	LDB	BYTECT
	LDX	BEGA
PD4000	LDA	0,X+
	ANDA	#$7F	MASKA BIT 8
*
* SKRIV EJ UT KONTROLLTECKEN
* MEN DÄREMOT SMÅ BOKSTÄVER
* DVS OM A<$20 BYT MOT .
*
	CMPA	#$20
	BLT	PD5000
	CMPA	#$7F
	BLT	PD6000
PD5000	LDA	#'.
PD6000	JSR	OUTCH
	DECB
	BNE	PD4000
*
	STX	BEGA
	CMPX	#0	GÅRTT RUNT FFFF ?
	BEQ	COMP99
*
* KOMPAKTERA START/STOPP ADRESSER
*
	LDD	ENDA
	SUBD	BEGA
	BCS	COMP99
	TST	BEGA+1
	BNE	PD1000
	JSR	PCRLF
	BRA	PD1000
*
COMP99	RTS
*
************************
*
* K O P I E R I N G *
*
************************
*
COPY	BSR	BEGEN3
	BHI	COPY80
COPY10	CMPY	ENDA
	BEQ	BREART
	LDA	0,Y+
*
COPY15	STA	0,X+	LAGRA
	CMPA	-1,X	FASTNADE
	BEQ	COPY10
*
* INGET MINNE I
*
COPY20	STX	TILL
	LDX	#TEXT08	'EJ ÄNDRAT'
	JSR	PSTRNG
	LDX	#TILL
OUT405	JMP	OUT4HS	"+RTS"
*
COPY80	LDD	ENDA	FLYTTA HÖGSTA BITEN FÖRST
	TFR	D,Y
	SUBD	BEGA
	LEAX	D,X	SKILLNADEN MELLAN "ENDA" & "BEGA"
*			 ADDERAD MED "TILL" FINNS NU I X-REG
COPY85	LDA	0,Y	HÄMTA
	STA	0,X	LÄGG UT
	CMPY	BEGA
	BEQ	BREART
	CMPA	0,X
	BNE	COPY20
	LEAX	-1,X
	LEAY	-1,Y
	BRA	COPY85	FASTNADE JO
*
BEGEN3	LDX	#TEXT07	'START SLUT TILL'
	JSR	PSTRNG
	JSR	BEGEND
	BVC	BEGEN4
	JMP	NONHEX
*
BEGEN4	EQU	*
	LEAX	1,X
	STX	ENDA
	JSR	BADDRS
	BVS	BEGEN3	TRY AGAIN
	STX	TILL
	CMPX	BEGA
BREART	RTS
*
*****
* HJÄLPRUTINER
*****
*
ADDRDA	JSR	PCRLF
	LDX	#BEGA
	BSR	OUT405	NNNN DD
	LDX	BEGA
OUT205	JMP	OUT2HS
*
BREAK	JSR	INCHEK	KOLLA OM TECKEN IN
	BEQ	BRETS
BRE20	JSR	INCH
	ANDA	#$7F
	CMPA	#'Q	AVBRYTA
	BEQ	BREAQ
	CMPA	#'q
	BEQ	BREAQ
	CMPA	#'0	PAUS ?
	BNE	BRETS
	BRA	BRE20
*
BREAQ	LEAS	2,S
BRETS	RTS
*
************************
*
* V E R I F Y
*
************************
*
VERIF	BSR	BEGEN3
VERI10	CMPY	ENDA
	BEQ	BREART
	LDA	0,Y
	CMPA	0,X	VERIFIERA
	BEQ	VERI20	HOPPA OM SAMMMA
*
	BSR	ADDRDA	NNNN DD
	JSR	OUTS	SP
	LDX	#TILL
	JSR	OUT4HS	MMMM
	LDX	TILL
	BSR	OUT205	DD
*
	LDX	TILL
VERI20	LEAY	1,Y
	STY	BEGA
	LEAX	1,X
	STX	TILL
	BSR	BREAK
	BRA	VERI10	OM IGEN
*
*
************************
*
* N O L L A / F F - S T Ä L L 
*
************************
*
*
NOLLFF	JSR	BEGENT
*
	LDX	#TEXT10	'BYTE'
	JSR	PSTRNG
	JSR	BYTE
	BVS	BRETS
NOLL10	CMPY	ENDA
	BEQ	BREART
	STA	0,Y+
	BRA	NOLL10
*
*
******************************
*
* E X T E N D E D  A D R .  T E S T
*
******************************
*
*
EXTE	JSR	BEGENT
EXTE2	LDX	#TEXT10	'BYTE'
	JSR	PSTRNG
	JSR	BYTE
	BVS	EXTE2
	STA	SLASK
*
EXTE10	CMPY	ENDA
	BNE	EXTE15
	RTS
*
EXTE15	STY	BEGA
	CMPA	0,Y+	MATCHAR ?
	BNE	EXTE20
*
* SKRIV NNNN OO PPPP
*
	JSR	ADDRDA
	JSR	OUT4HS
EXTE20	JSR	BREAK
	LDA	SLASK
	BRA	EXTE10
*
* MÄT RAMSTORLEK
*
METRAM	EQU	*
	LDX	#TEXT16	'RAM SLUT='
	JSR	PDATA
	LDX	#1
MET10	LDA	#$55
	LDB	0,X
	STA	0,X
	LDA	0,X
	STB	0,X+
	CMPA	#$55
	BEQ	MET10
*
MET80	LEAX	-2,X	BACKA
	STX	TEMP
	LDX	#TEMP	PRINTA SLUTADRESSEN
OUT408	JMP	OUT4HS	"+RTS"
*
* SÖK 2 BYTES
*
SOK2B	JSR	BEGENT
SOK2B2	LDX	#TEXT15	'ADRESS'
	JSR	PSTRNG
	JSR	BADDR	FIXA 4 TECKEN I X-REG
	BVS	SOK2B2
	STX	TILL
SOK2B4	CMPY	ENDA	Y=BEGA
	BNE	SOK25
	RTS
*
SOK25	STY	BEGA
	LDX	TILL
	CMPX	0,Y
	BNE	SOK2B7
	JSR	PCRLF
	LDX	#BEGA	HÄMTA ADRESSEN
	BSR	OUT408
	TFR	Y,X
	BSR	OUT408	LÄGG UT DATAT
SOK2B7	JSR	BREAK
	LEAY	1,Y
	BRA	SOK2B4
*
* RUTINER FÖR PROMKORT CÅ-816
*
PROM00	JSR	INCHA0
	CMPA	#'H
	BEQ	PROH00
	CMPA	#'R
	BEQ	PROR00
	CMPA	#'L
	LBNE	CONTRL
*
PROL00	JSR	BEGEN3	START SLUT TILL
	LDX	BEGA
	LDU	TILL
PROL10	STX	EPROM0
	LEAX	1,X
	LDA	EPROM0
	STA	0,U+
	CMPX	ENDA
	BLO	PROL10
	RTS
*
PROR00	JSR	BEGENT
PROR20	LDX	BEGA
PROR30	STX	EPROM0
	LEAX	1,X
	LDA	EPROM0
	CMPX	ENDA
	BLO	PROR30
	JSR	BREAK
	BRA	PROR20
*
PROH00	JSR	BEGENT
	CLRA
	CLRB
PROH20	STY	EPROM0
	LEAY	1,Y
	ADDB	EPROM0
	ADCA	#0
	CMPY	ENDA
	BNE	PROH20
	JMP	CKSM20
*
* MINIDISKBOOT
* Y= ADRESS TILL DISKBOOT $C000
* U= ADRESS TILL FDC-KONTROLLERN
*
BOOT0	LDA	#$7E	FIXA ÅTERSTART
	LDY	#$C000
	STA	0,Y
	LDX	#BOOT2
	STX	1,Y
BOOT2	LDU	#FLOPPY
	LDB	#$D8	FORCE INTERRUPT
	STB	$8,U	COMREG
	CLRA
	LDX	#0
OVR	STA	$4,U	DRIVE #0 MOTOR ON
	LEAX	1,X
	BNE	OVR
	LDB	#$0F	RESTORE TO TRACK 00
	STB	$8,U	COMREG TURN MOTOR ON
	BSR	BOTRTS
LOOP1	LDB	$8,U	COMREG
	BITB	#1	BUSY ?
	BNE	LOOP1
	LDA	#1
	STA	$A,U	SECREG
	BSR	BOTRTS
	LDA	#$8C	READ W LOAD
	STA	$8,U	COMREG
	BSR	BOTRTS
	LDB	$8,U	STATUSREG
LOOP2	BITB	#2	DRQ
	BEQ	LOOP3
	LDA	$B,U	DATREG
	STA	0,Y+
LOOP3	LDB	$8,U	STATUSREG
	BITB	#1	BUSY ?	
	BNE	LOOP2
	JMP	$C000
*
BOTRTS	BSR	BOOT49
BOOT49	BSR	BOOTRT
BOOTRT	RTS
*
JMPFLX	EQU	*
	LDX	#$7ECD
	CMPX	$CD03
	BNE	JMPRTS
	JMP	$CD03
*
JMPRTS	RTS
*
LDFLEX	EQU	*
	LDX	#$C700
LDFL10	CLR	0,X+
	CMPX	#$CC00	KLART ?
	BNE	LDFL10
	LDX	#$0C00	START I EPROM
	LDU	#$CC00	START I RAM
FLY100	STX	EPROM0
	LEAX	1,X
	LDA	EPROM0
	STA	0,U+
	CMPX	#$1FFF
	BNE	FLY100
	LDX	#$7ECD	KOLLA OM DET FINNS NÅ'T
	CMPX	$CD00
	BNE	JMPRTS
	JMP	$CD00
*
*
* MINNESTEST A LA SBUG
MEMTST	EQU	*
	JSR	BEGENS
	BVS	JMPRTS
	CLR	0,-S
	CLR	0,-S
	PSHS	X,Y
	CMPX	2,S
	BCS	LFA75
	JSR	OUTS
LFA01	TFR	Y,D
	ADDD	4,S
	PSHS	B
	ADDA	0,S+
	STA	0,Y+
	CMPY	0,S
	BCS	LFA01
	LDY	2,S
LFA13	TFR	Y,D
	ADDD	4,S
	PSHS	A
	ADDB	0,S+
	EORB	0,Y+
	BEQ	LFA5B
	LDX	#TEXT17
	JSR	PSTRNG
	LEAX	-1,Y
	STX	TILL	SPARA
	LDX	#TILL
	JSR	OUT4HS
	PSHS	X
	LDX	#TEXT18
	JSR	PDATA
	PULS	X
	LDX	#TEXT19
	JSR	PDATA
	LDX	4,S
	JSR	OUTHW
	LDX	#TEXT20
	JSR	PDATA
	TFR	B,A
	LDX	#TEXT21
	JSR	OUTCH
	JSR	INCHEK
	BNE	LFA75
LFA5B	CMPY	0,S
	BCS	LFA13
	LDA	#$2B
	JSR	OUTCH
	JSR	INCHEK
	BNE	LFA75
	LDY	2,S
	INC	5,S
	BNE	LFA01
	INC	4,S
	BNE	LFA01
LFA75	LEAS	6,S
	RTS
*
OUTHW	PSHS	X
	PULS	A
	JMP	OUT2HU
*
*
* INTERRUPT VECTORS JUMP TABLE
*
SIRQVK	JMP	[SIRQR]
SWI1VK	JMP	[SWI1R]
SWI2VK	JMP	[SWI2R]
SWI3VK	JMP	[SWI3R]
*
* KOMMANDOTABELL
*
KOMTAB	FDB	JMPFLX
	FDB	OUTRTS
	FDB	DISBKP	DISPLAY BREAKPOINTS
	FDB	CONTIN
	FDB	DUMP16
	FDB	EXTE
	FDB	BOOT0
	FDB	GOEXEC
	FDB	CHKSM
	FDB	CHUREG
	FDB	SUBR
	FDB	COPY
	FDB	LDFLEX	LOAD FLEX FROM PROMKORT
	FDB	CHANGE	MINNEMANIPULERING
	FDB	OUTRTS
	FDB	NOLLFF
	FDB	PROM00
	FDB	METRAM
	FDB	PRREG
	FDB	SOK2B
	FDB	OUTRTS
	FDB	NOBRKP
	FDB	SETBR
	FDB	MEMTST
	FDB	OUTRTS
	FDB	VERIF
	FDB	DUMPRI
	FDB	OUTRTS
	FDB	OUTRTS
	FDB	OUTRTS
	FDB	OUTRTS
KOMTEN	EQU	*
*
* VEKTORER
*
	ORG	F000+$FF0
BAUDR	FCB	$0E	9600 BAUD
SERIE	FCB	$00	$FF=SERIEPORT
	FDB	SWI3VK
	FDB	SWI2VK
	FDB	RETINT
	FDB	SIRQVK	SLOW IRQ
	FDB	SWI1VK	SWI VEKTOR
	FDB	SWISER
	FDB	KALST	RESTART VEKTOR KALL START
*
	END	KALST